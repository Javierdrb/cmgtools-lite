import os, sys, enum, argparse
from multiprocessing import Pool
import warnings as wr
import ROOT as r
r.PyConfig.IgnoreCommandLineOptions = True
r.gROOT.SetBatch(True)

friendspath  = "/pool/phedexrw/userstorage/vrbouza/proyectos/tw_run2/productions"
logpath      = friendspath + "/{p}/{y}/logs/cards_inclusive"

lumidict     = {2016 : 36.33, 
                2017 : 41.53,
                2018 : 59.74}
#lumidict     = {2016 : 18.165, 
#                2017 : 20.765,
#                2018 : 29.87}

#friendsscaff = "--FDs {P}/0_lumijson --Fs {P}/1_lepmerge_roch --Fs {P}/2_cleaning --Fs {P}/3_varstrigger --FMCs {P}/4_scalefactors --Fs {P}/5_mvas --Fs {P}/6_hemissue"
friendsscaff = "--FDs {P}/0_lumijson --Fs {P}/1_lepmerge_roch --Fs {P}/2_cleaning --Fs {P}/3_varstrigger --FMCs {P}/4_scalefactors --Fs {P}/5_mvas"
#friendsscaff = "--FDs {P}/0_lumijson --Fs {P}/1_lepmerge_roch --Fs {P}/2_cleaning_puid --Fs {P}/3_varstrigger_puid --FMCs {P}/4_scalefactors_puid --Fs {P}/5_mvas_puid" #5_mvas_DY_newWithDiv
#friendsscaff = "--FDs {P}/0_lumijson --Fs {P}/1_lepmerge_roch --Fs {P}/2_cleaning --Fs {P}/3_varstrigger_fixelecs --FMCs {P}/4_scalefactors --Fs {P}/5_mvas_fixelecs"
#friendsscaff = "--FDs {P}/0_lumijson --Fs {P}/1_lepmerge_roch --Fs {P}/2_cleaning --Fs {P}/3_varstrigger --FMCs {P}/4_scalefactors_neweffs --Fs {P}/5_mvas_neweffs"
#friendsscaff = "--FDs {P}/0_lumijson --Fs {P}/1_lepmerge_roch --Fs {P}/2_cleaning_deepcsv --Fs {P}/3_varstrigger_deepcsv --FMCs {P}/4_scalefactors_deepcsv --Fs {P}/5_mvas_deepcsv"

slurmscaff   = "sbatch -c {nth} -p {queue} -J {jobname} -e {logpath}/log.%j.%x.err -o {logpath}/log.%j.%x.out --wrap '{command}'"

listofforcedshape = "btagging_2016,btagging_2017,btagging_2018,btagging_corr,elecidsf,elecrecosf,fsr,isr_ttbar,isr_tw,jer_2016,jer_2017,jer_2018,jes_Absolute,jes_Absolute_2016,jes_Absolute_2017,jes_Absolute_2018,jes_BBEC1,jes_BBEC1_2016,jes_BBEC1_2017,jes_BBEC1_2018,jes_EC2,jes_EC2_2016,jes_EC2_2017,jes_EC2_2018,jes_FlavorQCD,jes_HF,jes_HF_2016,jes_HF_2017,jes_HF_2018,jes_RelativeBal,jes_RelativeSample_2016,jes_RelativeSample_2017,jes_RelativeSample_2018,lumi_2016,lumi_2017,lumi_2018,lumi_corr,lumi_corr1718,mistagging_2016,mistagging_2017,mistagging_2018,mistagging_corr,mtop,muonen_2016,muonen_2017,muonen_2018,muonidsf_stat_2016,muonidsf_stat_2017,muonidsf_stat_2018,muonidsf_syst,muonisosf_stat_2016,muonisosf_stat_2017,muonisosf_stat_2018,muonisosf_syst,pdfhessian,pileup,prefiring_2016,prefiring_2017,topptrew,triggereff_2016,triggereff_2017,triggereff_2018,ttbar_scales,tw_scales,ds,colour_rec_erdon,colour_rec_cr1,colour_rec_cr2"


#### TEMP PRUEBINA JETPUID
#listofforcedshape = "btagging_2016,btagging_2017,btagging_2018,btagging_corr,elecidsf,elecrecosf,fsr,isr_ttbar,isr_tw,jer_2016,jer_2017,jer_2018,jes_Absolute,jes_Absolute_2016,jes_Absolute_2017,jes_Absolute_2018,jes_BBEC1,jes_BBEC1_2016,jes_BBEC1_2017,jes_BBEC1_2018,jes_EC2,jes_EC2_2016,jes_EC2_2017,jes_EC2_2018,jes_FlavorQCD,jes_HF,jes_HF_2016,jes_HF_2017,jes_HF_2018,jes_RelativeBal,jes_RelativeSample_2016,jes_RelativeSample_2017,jes_RelativeSample_2018,lumi_2016,lumi_2017,lumi_2018,lumi_corr,lumi_corr1718,mistagging_2016,mistagging_2017,mistagging_2018,mistagging_corr,mtop,muonen_2016,muonen_2017,muonen_2018,muonidsf_stat_2016,muonidsf_stat_2017,muonidsf_stat_2018,muonidsf_syst,muonisosf_stat_2016,muonisosf_stat_2017,muonisosf_stat_2018,muonisosf_syst,pdfhessian,pileup,prefiring_2016,prefiring_2017,topptrew,triggereff_2016,triggereff_2017,triggereff_2018,ttbar_scales,tw_scales,ds,colour_rec_erdon,colour_rec_cr1,colour_rec_cr2,puidtag_corr,puidtag_2016,puidtag_2017,puidtag_2018,puidmistag_corr,puidmistag_2016,puidmistag_2017,puidmistag_2018"
#For 2016
#listofforcedshape = "btagging_2016,btagging_corr,elecidsf,elecrecosf,fsr,isr_ttbar,isr_tw,jer_2016,jes_Absolute,jes_Absolute_2016,jes_BBEC1,jes_BBEC1_2016,jes_EC2,jes_EC2_2016,jes_FlavorQCD,jes_HF,jes_HF_2016,jes_RelativeBal,jes_RelativeSample_2016,lumi_2016,lumi_corr,mistagging_2016,mistagging_corr,mtop,muonen_2016,muonidsf_stat_2016,muonidsf_syst,muonisosf_stat_2016,muonisosf_syst,pdfhessian,pileup,prefiring_2016,topptrew,triggereff_2016,ttbar_scales,tw_scales,ds,colour_rec_erdon,colour_rec_cr1,colour_rec_cr2"

# ds: forzada para asegurarnos la asimetria

#commandscaff = '''python makeShapeCardsNew.py --tree NanoAOD {mcafile} {cutsfile} "{variable}" "{bins}" {samplespaths} {friends} --od {outpath} -l {lumi} {nth} -f -L tw-run2/functions_tw.cc --neg --threshold 0.01 -W "MuonIDSF * MuonISOSF * ElecIDSF * ElecRECOSF * TrigSF * puWeight * bTagWeight * PrefireWeight" --year {year} {asimovornot} {uncs} {extra} --AP --storeAll --notMinimumFill --notVarsChanges'''
commandscaff = '''python makeShapeCards_TopRun2.py --tree NanoAOD {mcafile} {cutsfile} "{variable}" "{bins}" {samplespaths} {friends} --od {outpath} -l {lumi} {nth} -f -L tw-run2/functions_tw.cc --neg --threshold 0.01 -W "MuonIDSF * MuonISOSF * ElecIDSF * ElecRECOSF * TrigSF * puWeight * bTagWeight * PrefireWeight" --year {year} {asimovornot} {uncs} {extra} --AP --storeAll'''
#commandscaff = '''python makeShapeCards_TopRun2.py --tree NanoAOD {mcafile} {cutsfile} "{variable}" "{bins}" {samplespaths} {friends} --od {outpath} -l {lumi} {nth} -f -L tw-run2/functions_tw.cc --neg --threshold 0.01 -W "MuonIDSF * MuonISOSF * ElecIDSF * ElecRECOSF * TrigSF * puWeight * bTagWeight * PrefireWeight * jetPUidWeight" --year {year} {asimovornot} {uncs} {extra} --AP --storeAll'''
#commandscaff = '''python makeShapeCards_TopRun2.py --tree NanoAOD {mcafile} {cutsfile} "{variable}" "{bins}" {samplespaths} {friends} --od {outpath} -l {lumi} {nth} -f -L tw-run2/functions_tw.cc --neg --threshold 0.01 -W "MuonIDSF * MuonISOSF * ElecIDSF * ElecRECOSF * TrigSF * puWeight * bTagWeight * PrefireWeight * TopPtWeight" --year {year} {asimovornot} {uncs} {extra} --AP --storeAll'''


def GeneralExecutioner(task):
    prod, year, variable, bines, asimov, nthreads, outpath, region, queue, extra, pretend, useFibre, noUnc = task

    if not os.path.isdir(outpath + "/" + str(year)) and not pretend:
        os.system("mkdir -p " + outpath + "/" + str(year))

    if queue != "":
        if not os.path.isdir(logpath.format(y = year, p = prod)) and not pretend:
            os.system("mkdir -p " + logpath.format(y = year, p = prod))

        jobname_   = "Card_{r}_{y}".format(y = year, r = region)
        submitcomm = slurmscaff.format(nth  = nthreads,
                                    queue   = queue,
                                    jobname = jobname_,
                                    logpath = logpath.format(y = year, p = prod),
                                    command = CardsCommand(prod, year, variable, bines, asimov, nthreads, outpath, region, noUnc, useFibre, extra))
        print "Command:", submitcomm
        if not pretend: os.system(submitcomm)
    else:
        execcomm = CardsCommand(prod, year, variable, bines, asimov, nthreads, outpath, region, noUnc, useFibre, extra)
        print "Command:", execcomm
        if not pretend: os.system(execcomm)


    return






def confirm(message = "Do you wish to continue?"):
    """
    Ask user to enter y(es) or n(o) (case-insensitive).
    :return: True if the answer is Y.
    :rtype: bool
    """
    answer = ""
    while answer not in ["y", "n", "yes", "no"]:
        answer = raw_input(message + " [Y/N]\n").lower()
    return answer[0] == "y"




def CardsCommand(prod, year, var, bines, isAsimov, nthreads, outpath, region, noUnc, useFibre, extra):
    mcafile_   = "tw-run2/mca-tw.txt"
    cutsfile_  = "tw-run2/cuts-tw-{reg}.txt".format(reg = region)
    #mcafile_   = "tw-run2/mca-ttbartw.txt"

    samplespaths_ = "-P " + friendspath + "/" + prod + ("/" + year) * (year != "run2")
    if useFibre: samplespaths_ = samplespaths_.replace("phedexrw", "phedex").replace("cienciasrw", "ciencias")

#    nth_       = "" if nthreads == 0 else ("--split-factor=-1 -j " + str(nthreads))
    nth_       = "" if nthreads == 0 else ("--split-factor=0 -j " + str(nthreads))
    friends_   = friendsscaff
    outpath_   = outpath + "/" + year + "/" + region

    extra_ = extra + " --forceShape {l}".format(l = listofforcedshape)

    comm = commandscaff.format(outpath      = outpath_,
                               friends      = friends_,
                               samplespaths = samplespaths_,
                               lumi      = lumidict[int(year)] if year != "run2" else str(lumidict[2016]) + "," + str(lumidict[2017]) + "," + str(lumidict[2018]),
                               variable  = var,
                               bins      = bines,
                               nth       = nth_,
                               year      = year if year != "run2" else "2016,2017,2018",
                               asimovornot = "--asimov s+b" if isAsimov else "",
                               mcafile   = mcafile_,
                               cutsfile  = cutsfile_,
                               uncs      = "--unc tw-run2/uncs-tw_{r}mvaNEW.txt --amc".format(r = region) if not noUnc else "--amc",
                               #uncs      = "--unc tw-run2/uncs-tw_{r}mva_puid.txt --amc".format(r = region) if not noUnc else "--amc",
                               #uncs      = "--unc tw-run2/uncs-tw_{r}mva_20211202.txt --amc".format(r = region) if not noUnc else "--amc",
                               #uncs      = "--unc tw-run2/uncs-tw_{r}mva_ttbartw.txt --amc".format(r = region) if not noUnc else "--amc",
                               #uncs      = "--unc tw-run2/uncs-tw_{r}mvaTodoSmoothMenosABSB-BEC1.txt --amc".format(r = region) if not noUnc else "--amc",
                               #uncs      = "--unc tw-run2/uncs-tw.txt --amc" if not noUnc else "--amc",
                               #uncs      = "--unc tw-run2/uncs-tw_nadasuavizado.txt --amc" if not noUnc else "--amc",
                               extra     = extra_)

    return comm


def ExecuteOrSubmitTask(tsk):
    prod, year, variable, bines, asimov, nthreads, outpath, region, noUnc, useFibre, extra, pretend, queue = tsk

    if not os.path.isdir(outpath + "/" + year + "/" + region):
        os.system("mkdir -p " + outpath + "/" + year + "/" + region)

    if queue == "":
        thecomm = CardsCommand(prod, year, variable, bines, asimov, nthreads, outpath, region, noUnc, useFibre, extra)
        print "Command: " + thecomm

        if not pretend:
            os.system(thecomm)

    else:
        if not os.path.isdir(logpath.format(p = prod, y = yr)):
            os.system("mkdir -p " + logpath.format(p = prod, y = yr))

        thecomm = slurmscaff.format(nth     = nthreads,
                                    queue   = queue,
                                    jobname = "CMGTcards_" + year + "_" + (variable.replace("(", "").replace(")", "") if not "min" in variable else "Jet2_Pt") + "_" + region,
                                    logpath = logpath.format(p = prod, y = yr),
                                    command = CardsCommand(prod, year, variable, bines, asimov, nthreads, outpath, region, noUnc, useFibre, extra))

        print "Command: " + thecomm

        if not pretend:
            os.system(thecomm)
    return


if __name__ == "__main__":
    parser = argparse.ArgumentParser(usage = "python nanoAOD_checker.py [options]", description = "Checker tool for the outputs of nanoAOD production (NOT postprocessing)", formatter_class=argparse.ArgumentDefaultsHelpFormatter)
    parser.add_argument('--production','-P', metavar = "prod",       dest = "prod",     required = True)
    parser.add_argument('--year',      '-y', metavar = 'year',       dest = "year",     required = False, default = "2016")
    parser.add_argument('--queue',     '-q', metavar = 'queue',      dest = "queue",    required = False, default = "")
    parser.add_argument('--extraArgs', '-e', metavar = 'extra',      dest = "extra",    required = False, default = "")
    parser.add_argument('--nthreads',  '-j', metavar = 'nthreads',   dest = "nthreads", required = False, default = 0, type = int)
    parser.add_argument('--pretend',   '-p', action  = "store_true", dest = "pretend",  required = False, default = False)
    parser.add_argument('--outpath',   '-o', metavar = 'outpath',    dest = "outpath",  required = False, default = "./temp/cards")
    parser.add_argument('--region',    '-r', metavar = 'region',     dest = "region",   required = False, default = "1j1t")
    parser.add_argument('--nounc',     '-nu',action  = "store_true", dest = "nounc",    required = False, default = False)
    parser.add_argument('--variable',  '-v', metavar = 'variable',   dest = "variable", required = False, default = "getBDtW(tmvaBDT_1j1b)")
    parser.add_argument('--bines',     '-b', metavar = 'bines',      dest = "bines",    required = False, default = "[0.5,1.5,2.5,3.5,4.5,5.5, 6.5, 7.5, 8.5, 9.5, 10.5]")
    parser.add_argument('--asimov',    '-a', action  = "store_true", dest = "asimov",   required = False, default = False)
    parser.add_argument('--useFibre',  '-f', action  = "store_true", dest = "useFibre", required = False, default = False)


    args     = parser.parse_args()
    prod     = args.prod
    year     = args.year
    queue    = args.queue
    extra    = args.extra
    nthreads = args.nthreads
    pretend  = args.pretend
    outpath  = args.outpath
    region   = args.region
    noUnc    = args.nounc
    variable = args.variable
    bines    = args.bines
    asimov   = args.asimov
    useFibre = args.useFibre

    #print CardsCommand(prod, year, variable, bines, asimov, nthreads, outpath, region, noUnc, useFibre, extra)

    theregs  = ["1j1t", "2j1t", "2j2t"]
    thevars  = ["getBDtW20bins{year}NlooseJetsgeq1(tmvaBDT_1j1b)", "getBDtWOther12bins{year}(tmvaBDT_2j1b)", "min(max(Jet2_Pt, 30.), 189.)"] #Actual
#    thevars  = ["getBDtW20bins{year}NlooseJetsgeq1AndJetCut(tmvaBDT_1j1b)", "getBDtWOther12binsAndJetCut{year}(tmvaBDT_2j1b)", "min(max(Jet2_Pt, 30.), 189.)"]
#    thevars  = ["getBDtW10bins{year}(tmvaBDT_1j1b)", "getBDtWOther6bins{year}(tmvaBDT_2j1b)", "min(max(Jet2_Pt, 30.), 189.)"] 
#    thevars  = ["getBDtW20binsDYtrain{year}(tmvaBDT_1j1b)", "getBDtWOther12binsDYtrain{year}(tmvaBDT_2j1b)", "min(max(Jet2_Pt, 30.), 189.)"]
#    thevars  = ["getBDtW10binsDYtrain{year}(tmvaBDT_1j1b)", "getBDtWOther6binsDYtrain{year}(tmvaBDT_2j1b)", "min(max(Jet2_Pt, 30.), 189.)"]
    thebins  = ["[0.5,1.5,2.5,3.5,4.5,5.5,6.5,7.5,8.5,9.5,10.5,11.5,12.5,13.5,14.5,15.5,16.5,17.5,18.5,19.5,20.5]",
                "[0.5,1.5,2.5,3.5,4.5,5.5,6.5,7.5,8.5,9.5,10.5,11.5,12.5]",
                "[30.,40.,50.,60.,70.,80.,90.,100.,110.,120.,130.,140.,150.,160.,170.,180.,190.]"]              
#    thebins  = ["[0.5,1.5,2.5,3.5,4.5,5.5,6.5,7.5,8.5,9.5,10.5]",
#                "[1.5,2.5,3.5,4.5,5.5,6.5]",
#                "[30.,50.,70.,90.,110.,130.,150.,170.,190.]"]
    theyears = ["2016", "2017", "2018", "run2"]
    tasks    = []
    
    ########----No rebin---------#######
#    thevars  = ["tmvaBDT_1j1b", "tmvaBDT_2j1b", "min(max(Jet2_Pt, 30.), 189.)"]
#    thebins  = ["[-1.0, -0.8947368421052632, -0.7894736842105263, -0.6842105263157895, -0.5789473684210527, -0.4736842105263158, -0.368421052631579, -0.26315789473684215, -0.1578947368421053, -0.052631578947368474, 0.05263157894736836, 0.1578947368421053, 0.26315789473684204, 0.36842105263157876, 0.4736842105263157, 0.5789473684210527, 0.6842105263157894, 0.7894736842105261, 0.894736842105263, 1.0]","[-1.0, -0.8181818181818181, -0.6363636363636364, -0.4545454545454546, -0.2727272727272727, -0.09090909090909083, 0.09090909090909083, 0.2727272727272727, 0.4545454545454546, 0.6363636363636365, 0.8181818181818183, 1.0]","[30.,40.,50.,60.,70.,80.,90.,100.,110.,120.,130.,140.,150.,160.,170.,180.,190.]"]
    ########----No rebin---------#######
    
    ########----1 Bin test-------#######
#    thevars  = ["1", "1", "1"]
#    thebins  = ["[0.5,1.5]","[0.5,1.5]","[0.5,1.5]"]
    ########----1 Bin test-------#######

    ########----4 Bin test-------#######
    #thevars  = ["getBDtW4bins{year}NlooseJetsgeq1(tmvaBDT_1j1b)", "getBDtWOther4bins{year}(tmvaBDT_2j1b)", "min(max(Jet2_Pt, 30.), 189.)"]
    #thebins  = ["[0.5,1.5,2.5,3.5]","[0.5,1.5,2.5,3.5]","[30,70,110,150,190]"]
    ########----1 Bin test-------#######
    
    ########----2 Bin test-------#######
    #thevars  = ["getBDtW2bins{year}NlooseJetsgeq1(tmvaBDT_1j1b)", "getBDtWOther2bins{year}(tmvaBDT_2j1b)", "min(max(Jet2_Pt, 30.), 189.)"]
    #thebins  = ["[0.5,1.5,2.5]","[0.5,1.5,2.5]","[30,60,190]"]
    ########----1 Bin test-------#######
    
    ########----Variables test-------#######
    #thevars  = ["Jet1_Pt", "Jet2_Pt", "Jet2_Pt"]
    #thebins  = ["[30,100,200]","[30,100,200]","[30,100,200]"]
    ########----Variables test-------#######
    
    ########----Binning test-----#######
#    theregs  = ["1j1t", "2j1t", "2j2t"]
#    thevars  = ["theBDT500bins{year}(tmvaBDT_1j1b)", "theOtherBDT500bins{year}(tmvaBDT_2j1b)", "min(max(Jet2_Pt, 30.), 189.)"]
#    #thevars  = ["getBDtW20binsDYtrain{year}(tmvaBDT_1j1b)", "getBDtWOther12binsDYtrain{year}(tmvaBDT_2j1b)", "min(max(Jet2_Pt, 30.), 189.)"]
#    thebins  = ["[  0.5,   1.5,   2.5,   3.5,   4.5,   5.5,   6.5,   7.5,   8.5,         9.5,  10.5,  11.5,  12.5,  13.5,  14.5,  15.5,  16.5,  17.5,        18.5,  19.5,  20.5,  21.5,  22.5,  23.5,  24.5,  25.5,  26.5,        27.5,  28.5,  29.5,  30.5,  31.5,  32.5,  33.5,  34.5,  35.5,        36.5,  37.5,  38.5,  39.5,  40.5,  41.5,  42.5,  43.5,  44.5,        45.5,  46.5,  47.5,  48.5,  49.5,  50.5,  51.5,  52.5,  53.5,        54.5,  55.5,  56.5,  57.5,  58.5,  59.5,  60.5,  61.5,  62.5,        63.5,  64.5,  65.5,  66.5,  67.5,  68.5,  69.5,  70.5,  71.5,        72.5,  73.5,  74.5,  75.5,  76.5,  77.5,  78.5,  79.5,  80.5,        81.5,  82.5,  83.5,  84.5,  85.5,  86.5,  87.5,  88.5,  89.5,        90.5,  91.5,  92.5,  93.5,  94.5,  95.5,  96.5,  97.5,  98.5,        99.5, 100.5, 101.5, 102.5, 103.5, 104.5, 105.5, 106.5, 107.5,       108.5, 109.5, 110.5, 111.5, 112.5, 113.5, 114.5, 115.5, 116.5,       117.5, 118.5, 119.5, 120.5, 121.5, 122.5, 123.5, 124.5, 125.5,       126.5, 127.5, 128.5, 129.5, 130.5, 131.5, 132.5, 133.5, 134.5, 135.5, 136.5, 137.5, 138.5, 139.5, 140.5, 141.5, 142.5, 143.5,       144.5, 145.5, 146.5, 147.5, 148.5, 149.5, 150.5, 151.5, 152.5,       153.5, 154.5, 155.5, 156.5, 157.5, 158.5, 159.5, 160.5, 161.5,       162.5, 163.5, 164.5, 165.5, 166.5, 167.5, 168.5, 169.5, 170.5,       171.5, 172.5, 173.5, 174.5, 175.5, 176.5, 177.5, 178.5, 179.5,       180.5, 181.5, 182.5, 183.5, 184.5, 185.5, 186.5, 187.5, 188.5,       189.5, 190.5, 191.5, 192.5, 193.5, 194.5, 195.5, 196.5, 197.5,       198.5, 199.5, 200.5, 201.5, 202.5, 203.5, 204.5, 205.5, 206.5,       207.5, 208.5, 209.5, 210.5, 211.5, 212.5, 213.5, 214.5, 215.5,       216.5, 217.5, 218.5, 219.5, 220.5, 221.5, 222.5, 223.5, 224.5,       225.5, 226.5, 227.5, 228.5, 229.5, 230.5, 231.5, 232.5, 233.5,       234.5, 235.5, 236.5, 237.5, 238.5, 239.5, 240.5, 241.5, 242.5,       243.5, 244.5, 245.5, 246.5, 247.5, 248.5, 249.5, 250.5, 251.5,       252.5, 253.5, 254.5, 255.5, 256.5, 257.5, 258.5, 259.5, 260.5,       261.5, 262.5, 263.5, 264.5, 265.5, 266.5, 267.5, 268.5, 269.5,       270.5, 271.5, 272.5, 273.5, 274.5, 275.5, 276.5, 277.5, 278.5,       279.5, 280.5, 281.5, 282.5, 283.5, 284.5, 285.5, 286.5, 287.5,       288.5, 289.5, 290.5, 291.5, 292.5, 293.5, 294.5, 295.5, 296.5,       297.5, 298.5, 299.5, 300.5, 301.5, 302.5, 303.5, 304.5, 305.5,       306.5, 307.5, 308.5, 309.5, 310.5, 311.5, 312.5, 313.5, 314.5,       315.5, 316.5, 317.5, 318.5, 319.5, 320.5, 321.5, 322.5, 323.5,       324.5, 325.5, 326.5, 327.5, 328.5, 329.5, 330.5, 331.5, 332.5,       333.5, 334.5, 335.5, 336.5, 337.5, 338.5, 339.5, 340.5, 341.5,       342.5, 343.5, 344.5, 345.5, 346.5, 347.5, 348.5, 349.5, 350.5,       351.5, 352.5, 353.5, 354.5, 355.5, 356.5, 357.5, 358.5, 359.5,       360.5, 361.5, 362.5, 363.5, 364.5, 365.5, 366.5, 367.5, 368.5,       369.5, 370.5, 371.5, 372.5, 373.5, 374.5, 375.5, 376.5, 377.5,       378.5, 379.5, 380.5, 381.5, 382.5, 383.5, 384.5, 385.5, 386.5,       387.5, 388.5, 389.5, 390.5, 391.5, 392.5, 393.5, 394.5, 395.5,       396.5, 397.5, 398.5, 399.5, 400.5, 401.5, 402.5, 403.5, 404.5,       405.5, 406.5, 407.5, 408.5, 409.5, 410.5, 411.5, 412.5, 413.5,       414.5, 415.5, 416.5, 417.5, 418.5, 419.5, 420.5, 421.5, 422.5,       423.5, 424.5, 425.5, 426.5, 427.5, 428.5, 429.5, 430.5, 431.5,       432.5, 433.5, 434.5, 435.5, 436.5, 437.5, 438.5, 439.5, 440.5,       441.5, 442.5, 443.5, 444.5, 445.5, 446.5, 447.5, 448.5, 449.5,       450.5, 451.5, 452.5, 453.5, 454.5, 455.5, 456.5, 457.5, 458.5,       459.5, 460.5, 461.5, 462.5, 463.5, 464.5, 465.5, 466.5, 467.5,       468.5, 469.5, 470.5, 471.5, 472.5, 473.5, 474.5, 475.5, 476.5,       477.5, 478.5, 479.5, 480.5, 481.5, 482.5, 483.5, 484.5, 485.5,       486.5, 487.5, 488.5, 489.5, 490.5, 491.5, 492.5, 493.5, 494.5,       495.5, 496.5, 497.5, 498.5, 499.5,500.5]",
#                "[  0.5,   1.5,   2.5,   3.5,   4.5,   5.5,   6.5,   7.5,   8.5,         9.5,  10.5,  11.5,  12.5,  13.5,  14.5,  15.5,  16.5,  17.5,        18.5,  19.5,  20.5,  21.5,  22.5,  23.5,  24.5,  25.5,  26.5,        27.5,  28.5,  29.5,  30.5,  31.5,  32.5,  33.5,  34.5,  35.5,        36.5,  37.5,  38.5,  39.5,  40.5,  41.5,  42.5,  43.5,  44.5,        45.5,  46.5,  47.5,  48.5,  49.5,  50.5,  51.5,  52.5,  53.5,        54.5,  55.5,  56.5,  57.5,  58.5,  59.5,  60.5,  61.5,  62.5,        63.5,  64.5,  65.5,  66.5,  67.5,  68.5,  69.5,  70.5,  71.5,        72.5,  73.5,  74.5,  75.5,  76.5,  77.5,  78.5,  79.5,  80.5,        81.5,  82.5,  83.5,  84.5,  85.5,  86.5,  87.5,  88.5,  89.5,        90.5,  91.5,  92.5,  93.5,  94.5,  95.5,  96.5,  97.5,  98.5,        99.5, 100.5, 101.5, 102.5, 103.5, 104.5, 105.5, 106.5, 107.5,       108.5, 109.5, 110.5, 111.5, 112.5, 113.5, 114.5, 115.5, 116.5,       117.5, 118.5, 119.5, 120.5, 121.5, 122.5, 123.5, 124.5, 125.5,       126.5, 127.5, 128.5, 129.5, 130.5, 131.5, 132.5, 133.5, 134.5, 135.5, 136.5, 137.5, 138.5, 139.5, 140.5, 141.5, 142.5, 143.5,       144.5, 145.5, 146.5, 147.5, 148.5, 149.5, 150.5, 151.5, 152.5,       153.5, 154.5, 155.5, 156.5, 157.5, 158.5, 159.5, 160.5, 161.5,       162.5, 163.5, 164.5, 165.5, 166.5, 167.5, 168.5, 169.5, 170.5,       171.5, 172.5, 173.5, 174.5, 175.5, 176.5, 177.5, 178.5, 179.5,       180.5, 181.5, 182.5, 183.5, 184.5, 185.5, 186.5, 187.5, 188.5,       189.5, 190.5, 191.5, 192.5, 193.5, 194.5, 195.5, 196.5, 197.5,       198.5, 199.5, 200.5, 201.5, 202.5, 203.5, 204.5, 205.5, 206.5,       207.5, 208.5, 209.5, 210.5, 211.5, 212.5, 213.5, 214.5, 215.5,       216.5, 217.5, 218.5, 219.5, 220.5, 221.5, 222.5, 223.5, 224.5,       225.5, 226.5, 227.5, 228.5, 229.5, 230.5, 231.5, 232.5, 233.5,       234.5, 235.5, 236.5, 237.5, 238.5, 239.5, 240.5, 241.5, 242.5,       243.5, 244.5, 245.5, 246.5, 247.5, 248.5, 249.5, 250.5, 251.5,       252.5, 253.5, 254.5, 255.5, 256.5, 257.5, 258.5, 259.5, 260.5,       261.5, 262.5, 263.5, 264.5, 265.5, 266.5, 267.5, 268.5, 269.5,       270.5, 271.5, 272.5, 273.5, 274.5, 275.5, 276.5, 277.5, 278.5,       279.5, 280.5, 281.5, 282.5, 283.5, 284.5, 285.5, 286.5, 287.5,       288.5, 289.5, 290.5, 291.5, 292.5, 293.5, 294.5, 295.5, 296.5,       297.5, 298.5, 299.5, 300.5, 301.5, 302.5, 303.5, 304.5, 305.5,       306.5, 307.5, 308.5, 309.5, 310.5, 311.5, 312.5, 313.5, 314.5,       315.5, 316.5, 317.5, 318.5, 319.5, 320.5, 321.5, 322.5, 323.5,       324.5, 325.5, 326.5, 327.5, 328.5, 329.5, 330.5, 331.5, 332.5,       333.5, 334.5, 335.5, 336.5, 337.5, 338.5, 339.5, 340.5, 341.5,       342.5, 343.5, 344.5, 345.5, 346.5, 347.5, 348.5, 349.5, 350.5,       351.5, 352.5, 353.5, 354.5, 355.5, 356.5, 357.5, 358.5, 359.5,       360.5, 361.5, 362.5, 363.5, 364.5, 365.5, 366.5, 367.5, 368.5,       369.5, 370.5, 371.5, 372.5, 373.5, 374.5, 375.5, 376.5, 377.5,       378.5, 379.5, 380.5, 381.5, 382.5, 383.5, 384.5, 385.5, 386.5,       387.5, 388.5, 389.5, 390.5, 391.5, 392.5, 393.5, 394.5, 395.5,       396.5, 397.5, 398.5, 399.5, 400.5, 401.5, 402.5, 403.5, 404.5,       405.5, 406.5, 407.5, 408.5, 409.5, 410.5, 411.5, 412.5, 413.5,       414.5, 415.5, 416.5, 417.5, 418.5, 419.5, 420.5, 421.5, 422.5,       423.5, 424.5, 425.5, 426.5, 427.5, 428.5, 429.5, 430.5, 431.5,       432.5, 433.5, 434.5, 435.5, 436.5, 437.5, 438.5, 439.5, 440.5,       441.5, 442.5, 443.5, 444.5, 445.5, 446.5, 447.5, 448.5, 449.5,       450.5, 451.5, 452.5, 453.5, 454.5, 455.5, 456.5, 457.5, 458.5,       459.5, 460.5, 461.5, 462.5, 463.5, 464.5, 465.5, 466.5, 467.5,       468.5, 469.5, 470.5, 471.5, 472.5, 473.5, 474.5, 475.5, 476.5,       477.5, 478.5, 479.5, 480.5, 481.5, 482.5, 483.5, 484.5, 485.5,       486.5, 487.5, 488.5, 489.5, 490.5, 491.5, 492.5, 493.5, 494.5,       495.5, 496.5, 497.5, 498.5, 499.5,500.5]",
#                "[30.0, 30.10673782521681, 30.213475650433622, 30.320213475650434, 30.426951300867245, 30.533689126084056, 30.640426951300867, 30.74716477651768, 30.85390260173449, 30.9606404269513, 31.067378252168112, 31.174116077384923, 31.280853902601734, 31.387591727818545, 31.494329553035357, 31.601067378252168, 31.70780520346898, 31.81454302868579, 31.9212808539026, 32.02801867911941, 32.134756504336224, 32.241494329553035, 32.348232154769846, 32.45496997998666, 32.56170780520347, 32.66844563042028, 32.77518345563709, 32.8819212808539, 32.98865910607071, 33.095396931287524, 33.202134756504336, 33.30887258172115, 33.41561040693796, 33.52234823215477, 33.62908605737158, 33.73582388258839, 33.8425617078052, 33.949299533022014, 34.056037358238825, 34.162775183455636, 34.26951300867245, 34.37625083388926, 34.48298865910607, 34.58972648432288, 34.69646430953969, 34.8032021347565, 34.909939959973315, 35.016677785190126, 35.12341561040694, 35.23015343562375, 35.33689126084056, 35.44362908605737, 35.55036691127418, 35.65710473649099, 35.763842561707804, 35.870580386924615, 35.97731821214143, 36.08405603735824, 36.19079386257505, 36.29753168779186, 36.40426951300867, 36.51100733822548, 36.617745163442294, 36.724482988659105, 36.831220813875916, 36.93795863909273, 37.04469646430954, 37.15143428952635, 37.25817211474316, 37.36490993995997, 37.47164776517678, 37.578385590393594, 37.685123415610406, 37.79186124082722, 37.89859906604403, 38.00533689126084, 38.11207471647765, 38.21881254169446, 38.32555036691127, 38.432288192128084, 38.539026017344895, 38.645763842561706, 38.75250166777852, 38.85923949299533, 38.96597731821214, 39.07271514342895, 39.17945296864576, 39.28619079386257, 39.392928619079385, 39.499666444296196, 39.60640426951301, 39.71314209472982, 39.81987991994663, 39.92661774516344, 40.03335557038025, 40.14009339559706, 40.246831220813874, 40.353569046030685, 40.4603068712475, 40.56704469646431, 40.67378252168112, 40.78052034689793, 40.88725817211474, 40.99399599733155, 41.100733822548364, 41.207471647765175, 41.314209472981986, 41.4209472981988, 41.52768512341561, 41.63442294863242, 41.74116077384923, 41.84789859906604, 41.95463642428285, 42.061374249499664, 42.168112074716475, 42.27484989993329, 42.3815877251501, 42.48832555036691, 42.59506337558372, 42.70180120080053, 42.80853902601734, 42.915276851234154, 43.022014676450965, 43.128752501667776, 43.23549032688459, 43.3422281521014, 43.44896597731821, 43.55570380253502, 43.66244162775183, 43.76917945296864, 43.875917278185455, 43.982655103402266, 44.08939292861908, 44.19613075383589, 44.3028685790527, 44.40960640426951, 44.51634422948632, 44.62308205470313, 44.729819879919944, 44.836557705136755, 44.943295530353566, 45.05003335557038, 45.15677118078719, 45.263509006004, 45.37024683122081, 45.47698465643762, 45.58372248165443, 45.690460306871245, 45.797198132088056, 45.90393595730487, 46.01067378252168, 46.11741160773849, 46.2241494329553, 46.33088725817211, 46.43762508338892, 46.544362908605734, 46.651100733822545, 46.75783855903936, 46.86457638425617, 46.97131420947298, 47.07805203468979, 47.1847898599066, 47.29152768512341, 47.398265510340224, 47.505003335557035, 47.611741160773846, 47.71847898599066, 47.82521681120747, 47.93195463642428, 48.03869246164109, 48.1454302868579, 48.25216811207471, 48.358905937291524, 48.465643762508336, 48.57238158772515, 48.67911941294196, 48.78585723815877, 48.89259506337558, 48.99933288859239, 49.1060707138092, 49.212808539026014, 49.319546364242825, 49.426284189459636, 49.53302201467645, 49.63975983989326, 49.74649766511007, 49.85323549032688, 49.95997331554369, 50.0667111407605, 50.173448965977315, 50.280186791194126, 50.38692461641094, 50.49366244162775, 50.60040026684456, 50.70713809206137, 50.81387591727818, 50.92061374249499, 51.027351567711804, 51.134089392928615, 51.24082721814543, 51.34756504336224, 51.45430286857905, 51.56104069379586, 51.66777851901267, 51.77451634422948, 51.881254169446294, 51.987991994663105, 52.094729819879916, 52.20146764509673, 52.30820547031354, 52.41494329553035, 52.52168112074716, 52.62841894596397, 52.73515677118078, 52.841894596397594, 52.948632421614406, 53.05537024683122, 53.16210807204803, 53.26884589726484, 53.37558372248165, 53.48232154769846, 53.58905937291527, 53.695797198132084, 53.802535023348895, 53.909272848565706, 54.01601067378252, 54.12274849899933, 54.22948632421614, 54.33622414943295, 54.44296197464976, 54.54969979986657, 54.656437625083385, 54.763175450300196, 54.86991327551701, 54.97665110073382, 55.08338892595063, 55.19012675116744, 55.29686457638425, 55.40360240160106, 55.510340226817874, 55.617078052034685, 55.723815877251496, 55.83055370246831, 55.93729152768512, 56.04402935290193, 56.15076717811874, 56.25750500333555, 56.364242828552364, 56.470980653769175, 56.577718478985986, 56.6844563042028, 56.79119412941961, 56.89793195463642, 57.00466977985323, 57.11140760507004, 57.21814543028685, 57.324883255503664, 57.431621080720475, 57.53835890593729, 57.6450967311541, 57.75183455637091, 57.85857238158772, 57.96531020680453, 58.07204803202134, 58.178785857238154, 58.285523682454965, 58.392261507671776, 58.49899933288859, 58.6057371581054, 58.71247498332221, 58.81921280853902, 58.92595063375583, 59.03268845897264, 59.139426284189454, 59.246164109406266, 59.35290193462308, 59.45963975983989, 59.5663775850567, 59.67311541027351, 59.77985323549032, 59.88659106070713, 59.993328885923944, 60.100066711140755, 60.206804536357566, 60.31354236157438, 60.42028018679119, 60.527018012008, 60.63375583722481, 60.74049366244162, 60.84723148765843, 60.953969312875245, 61.060707138092056, 61.16744496330887, 61.27418278852568, 61.38092061374249, 61.4876584389593, 61.59439626417611, 61.70113408939292, 61.807871914609734, 61.914609739826545, 62.021347565043364, 62.128085390260175, 62.234823215476986, 62.3415610406938, 62.44829886591061, 62.55503669112742, 62.66177451634423, 62.76851234156104, 62.87525016677785, 62.981987991994664, 63.088725817211476, 63.19546364242829, 63.3022014676451, 63.40893929286191, 63.51567711807872, 63.62241494329553, 63.72915276851234, 63.835890593729154, 63.942628418945965, 64.04936624416277, 64.15610406937958, 64.26284189459639, 64.3695797198132, 64.47631754503001, 64.58305537024683, 64.68979319546364, 64.79653102068045, 64.90326884589726, 65.01000667111407, 65.11674449633088, 65.22348232154769, 65.3302201467645, 65.43695797198131, 65.54369579719813, 65.65043362241494, 65.75717144763175, 65.86390927284856, 65.97064709806537, 66.07738492328218, 66.184122748499, 66.2908605737158, 66.39759839893262, 66.50433622414943, 66.61107404936624, 66.71781187458305, 66.82454969979986, 66.93128752501667, 67.03802535023348, 67.1447631754503, 67.2515010006671, 67.35823882588392, 67.46497665110073, 67.57171447631754, 67.67845230153435, 67.78519012675116, 67.89192795196797, 67.99866577718478, 68.1054036024016, 68.2121414276184, 68.31887925283522, 68.42561707805203, 68.53235490326884, 68.63909272848565, 68.74583055370246, 68.85256837891927, 68.95930620413608, 69.0660440293529, 69.1727818545697, 69.27951967978652, 69.38625750500333, 69.49299533022014, 69.59973315543695, 69.70647098065376, 69.81320880587057, 69.91994663108738, 70.0266844563042, 70.133422281521, 70.24016010673782, 70.34689793195463, 70.45363575717144, 70.56037358238825, 70.66711140760506, 70.77384923282187, 70.88058705803869, 70.9873248832555, 71.09406270847231, 71.20080053368912, 71.30753835890593, 71.41427618412274, 71.52101400933955, 71.62775183455636, 71.73448965977317, 71.84122748498999, 71.9479653102068, 72.05470313542361, 72.16144096064042, 72.26817878585723, 72.37491661107404, 72.48165443629085, 72.58839226150766, 72.69513008672448, 72.80186791194129, 72.9086057371581, 73.01534356237491, 73.12208138759172, 73.22881921280853, 73.33555703802534, 73.44229486324215, 73.54903268845896, 73.65577051367578, 73.76250833889259, 73.8692461641094, 73.97598398932621, 74.08272181454302, 74.18945963975983, 74.29619746497664, 74.40293529019345, 74.50967311541027, 74.61641094062708, 74.72314876584389, 74.8298865910607, 74.93662441627751, 75.04336224149432, 75.15010006671113, 75.25683789192794, 75.36357571714476, 75.47031354236157, 75.57705136757838, 75.68378919279519, 75.790527018012, 75.89726484322881, 76.00400266844562, 76.11074049366243, 76.21747831887924, 76.32421614409606, 76.43095396931287, 76.53769179452968, 76.64442961974649, 76.7511674449633, 76.85790527018011, 76.96464309539692, 77.07138092061373, 77.17811874583055, 77.28485657104736, 77.39159439626417, 77.49833222148098, 77.60507004669779, 77.7118078719146, 77.81854569713141, 77.92528352234822, 78.03202134756503, 78.13875917278185, 78.24549699799866, 78.35223482321547, 78.45897264843228, 78.56571047364909, 78.6724482988659, 78.77918612408271, 78.88592394929952, 78.99266177451634, 79.09939959973315, 79.20613742494996, 79.31287525016677, 79.41961307538358, 79.52635090060039, 79.6330887258172, 79.73982655103401, 79.84656437625083, 79.95330220146764, 80.06004002668445, 80.16677785190126, 80.27351567711807, 80.38025350233488, 80.48699132755169, 80.5937291527685, 80.70046697798531, 80.80720480320213, 80.91394262841894, 81.02068045363575, 81.12741827885256, 81.23415610406937, 81.34089392928618, 81.44763175450299, 81.5543695797198, 81.66110740493662, 81.76784523015343, 81.87458305537024, 81.98132088058705, 82.08805870580386, 82.19479653102067, 82.30153435623748, 82.4082721814543, 82.5150100066711, 82.62174783188792, 82.72848565710473, 82.83522348232154, 82.94196130753835, 83.04869913275516, 83.15543695797197, 83.26217478318878, 83.3689126084056, 83.4756504336224, 83.58238825883922, 83.68912608405603, 83.79586390927284, 83.90260173448965, 84.00933955970646, 84.11607738492327, 84.22281521014008, 84.3295530353569, 84.4362908605737, 84.54302868579052, 84.64976651100733, 84.75650433622414, 84.86324216144095, 84.96997998665776, 85.07671781187457, 85.18345563709138, 85.2901934623082, 85.396931287525, 85.50366911274182, 85.61040693795863, 85.71714476317544, 85.82388258839225, 85.93062041360906, 86.03735823882587, 86.14409606404269, 86.2508338892595, 86.35757171447631, 86.46430953969312, 86.57104736490993, 86.67778519012674, 86.78452301534355, 86.89126084056036, 86.99799866577717, 87.10473649099399, 87.2114743162108, 87.31821214142761, 87.42494996664442, 87.53168779186123, 87.63842561707804, 87.74516344229485, 87.85190126751166, 87.95863909272848, 88.06537691794529, 88.1721147431621, 88.27885256837891, 88.38559039359572, 88.49232821881253, 88.59906604402934, 88.70580386924615, 88.81254169446296, 88.91927951967978, 89.02601734489659, 89.1327551701134, 89.23949299533021, 89.34623082054702, 89.45296864576383, 89.55970647098064, 89.66644429619745, 89.77318212141427, 89.87991994663108, 89.98665777184789, 90.0933955970647, 90.20013342228151, 90.30687124749832, 90.41360907271513, 90.52034689793194, 90.62708472314876, 90.73382254836557, 90.84056037358238, 90.94729819879919, 91.054036024016, 91.16077384923281, 91.26751167444962, 91.37424949966643, 91.48098732488324, 91.58772515010006, 91.69446297531687, 91.80120080053368, 91.90793862575049, 92.0146764509673, 92.12141427618411, 92.22815210140092, 92.33488992661773, 92.44162775183455, 92.54836557705136, 92.65510340226817, 92.76184122748498, 92.86857905270179, 92.9753168779186, 93.08205470313541, 93.18879252835222, 93.29553035356903, 93.40226817878585, 93.50900600400266, 93.61574382921947, 93.72248165443628, 93.82921947965309, 93.9359573048699, 94.04269513008673, 94.14943295530354, 94.25617078052035, 94.36290860573716, 94.46964643095397, 94.57638425617078, 94.6831220813876, 94.7898599066044, 94.89659773182122, 95.00333555703803, 95.11007338225484, 95.21681120747165, 95.32354903268846, 95.43028685790527, 95.53702468312208, 95.6437625083389, 95.7505003335557, 95.85723815877252, 95.96397598398933, 96.07071380920614, 96.17745163442295, 96.28418945963976, 96.39092728485657, 96.49766511007338, 96.6044029352902, 96.711140760507, 96.81787858572382, 96.92461641094063, 97.03135423615744, 97.13809206137425, 97.24482988659106, 97.35156771180787, 97.45830553702469, 97.5650433622415, 97.67178118745831, 97.77851901267512, 97.88525683789193, 97.99199466310874, 98.09873248832555, 98.20547031354236, 98.31220813875917, 98.41894596397599, 98.5256837891928, 98.63242161440961, 98.73915943962642, 98.84589726484323, 98.95263509006004, 99.05937291527685, 99.16611074049366, 99.27284856571048, 99.37958639092729, 99.4863242161441, 99.59306204136091, 99.69979986657772, 99.80653769179453, 99.91327551701134, 100.02001334222815, 100.12675116744497, 100.23348899266178, 100.34022681787859, 100.4469646430954, 100.55370246831221, 100.66044029352902, 100.76717811874583, 100.87391594396264, 100.98065376917945, 101.08739159439627, 101.19412941961308, 101.30086724482989, 101.4076050700467, 101.51434289526351, 101.62108072048032, 101.72781854569713, 101.83455637091394, 101.94129419613076, 102.04803202134757, 102.15476984656438, 102.26150767178119, 102.368245496998, 102.47498332221481, 102.58172114743162, 102.68845897264843, 102.79519679786524, 102.90193462308206, 103.00867244829887, 103.11541027351568, 103.22214809873249, 103.3288859239493, 103.43562374916611, 103.54236157438292, 103.64909939959973, 103.75583722481655, 103.86257505003336, 103.96931287525017, 104.07605070046698, 104.18278852568379, 104.2895263509006, 104.39626417611741, 104.50300200133422, 104.60973982655103, 104.71647765176785, 104.82321547698466, 104.92995330220147, 105.03669112741828, 105.14342895263509, 105.2501667778519, 105.35690460306871, 105.46364242828552, 105.57038025350234, 105.67711807871915, 105.78385590393596, 105.89059372915277, 105.99733155436958, 106.10406937958639, 106.2108072048032, 106.31754503002001, 106.42428285523683, 106.53102068045364, 106.63775850567045, 106.74449633088726, 106.85123415610407, 106.95797198132088, 107.06470980653769, 107.1714476317545, 107.27818545697131, 107.38492328218813, 107.49166110740494, 107.59839893262175, 107.70513675783856, 107.81187458305537, 107.91861240827218, 108.025350233489, 108.1320880587058, 108.23882588392262, 108.34556370913943, 108.45230153435624, 108.55903935957305, 108.66577718478986, 108.77251501000667, 108.87925283522348, 108.9859906604403, 109.0927284856571, 109.19946631087392, 109.30620413609073, 109.41294196130754, 109.51967978652435, 109.62641761174116, 109.73315543695797, 109.83989326217478, 109.9466310873916, 110.0533689126084, 110.16010673782522, 110.26684456304203, 110.37358238825884, 110.48032021347565, 110.58705803869246, 110.69379586390927, 110.80053368912608, 110.9072715143429, 111.0140093395597, 111.12074716477652, 111.22748498999333, 111.33422281521014, 111.44096064042695, 111.54769846564376, 111.65443629086057, 111.76117411607738, 111.8679119412942, 111.974649766511, 112.08138759172782, 112.18812541694463, 112.29486324216144, 112.40160106737825, 112.50833889259506, 112.61507671781187, 112.72181454302869, 112.8285523682455, 112.93529019346231, 113.04202801867912, 113.14876584389593, 113.25550366911274, 113.36224149432955, 113.46897931954636, 113.57571714476317, 113.68245496997999, 113.7891927951968, 113.89593062041361, 114.00266844563042, 114.10940627084723, 114.21614409606404, 114.32288192128085, 114.42961974649766, 114.53635757171448, 114.64309539693129, 114.7498332221481, 114.85657104736491, 114.96330887258172, 115.07004669779853, 115.17678452301534, 115.28352234823215, 115.39026017344897, 115.49699799866578, 115.60373582388259, 115.7104736490994, 115.81721147431621, 115.92394929953302, 116.03068712474983, 116.13742494996664, 116.24416277518345, 116.35090060040027, 116.45763842561708, 116.56437625083389, 116.6711140760507, 116.77785190126751, 116.88458972648432, 116.99132755170113, 117.09806537691794, 117.20480320213476, 117.31154102735157, 117.41827885256838, 117.52501667778519, 117.631754503002, 117.73849232821881, 117.84523015343562, 117.95196797865243, 118.05870580386924, 118.16544362908606, 118.27218145430287, 118.37891927951968, 118.48565710473649, 118.5923949299533, 118.69913275517011, 118.80587058038692, 118.91260840560373, 119.01934623082055, 119.12608405603736, 119.23282188125417, 119.33955970647098, 119.44629753168779, 119.5530353569046, 119.65977318212141, 119.76651100733822, 119.87324883255503, 119.97998665777185, 120.08672448298866, 120.19346230820547, 120.30020013342228, 120.40693795863909, 120.5136757838559, 120.62041360907271, 120.72715143428952, 120.83388925950634, 120.94062708472315, 121.04736490993996, 121.15410273515677, 121.26084056037358, 121.36757838559039, 121.4743162108072, 121.58105403602401, 121.68779186124083, 121.79452968645764, 121.90126751167445, 122.00800533689126, 122.11474316210807, 122.22148098732488, 122.32821881254169, 122.4349566377585, 122.54169446297531, 122.64843228819213, 122.75517011340894, 122.86190793862575, 122.96864576384256, 123.07538358905937, 123.18212141427618, 123.288859239493, 123.3955970647098, 123.50233488992662, 123.60907271514343, 123.71581054036024, 123.82254836557705, 123.92928619079386, 124.03602401601067, 124.14276184122748, 124.2494996664443, 124.3562374916611, 124.46297531687792, 124.56971314209473, 124.67645096731154, 124.78318879252835, 124.88992661774516, 124.99666444296197, 125.10340226817878, 125.2101400933956, 125.3168779186124, 125.42361574382922, 125.53035356904603, 125.63709139426284, 125.74382921947965, 125.85056704469646, 125.95730486991327, 126.06404269513008, 126.1707805203469, 126.2775183455637, 126.38425617078052, 126.49099399599733, 126.59773182121414, 126.70446964643095, 126.81120747164776, 126.91794529686457, 127.02468312208138, 127.1314209472982, 127.238158772515, 127.34489659773182, 127.45163442294863, 127.55837224816544, 127.66511007338225, 127.77184789859906, 127.87858572381587, 127.98532354903269, 128.0920613742495, 128.1987991994663, 128.30553702468313, 128.41227484989992, 128.51901267511676, 128.62575050033354, 128.73248832555038, 128.83922615076716, 128.945963975984, 129.05270180120078, 129.15943962641762, 129.2661774516344, 129.37291527685124, 129.47965310206803, 129.58639092728487, 129.69312875250165, 129.7998665777185, 129.90660440293527, 130.0133422281521, 130.1200800533689, 130.22681787858573, 130.33355570380252, 130.44029352901936, 130.54703135423614, 130.65376917945298, 130.76050700466976, 130.8672448298866, 130.97398265510338, 131.08072048032022, 131.187458305537, 131.29419613075385, 131.40093395597063, 131.50767178118747, 131.61440960640425, 131.7211474316211, 131.82788525683787, 131.9346230820547, 132.0413609072715, 132.14809873248834, 132.25483655770512, 132.36157438292196, 132.46831220813874, 132.57505003335558, 132.68178785857236, 132.7885256837892, 132.89526350900599, 133.00200133422283, 133.1087391594396, 133.21547698465645, 133.32221480987323, 133.42895263509007, 133.53569046030685, 133.6424282855237, 133.74916611074048, 133.85590393595731, 133.9626417611741, 134.06937958639094, 134.17611741160772, 134.28285523682456, 134.38959306204134, 134.49633088725818, 134.60306871247496, 134.7098065376918, 134.8165443629086, 134.92328218812543, 135.0300200133422, 135.13675783855905, 135.24349566377583, 135.35023348899267, 135.45697131420945, 135.5637091394263, 135.67044696464308, 135.77718478985992, 135.8839226150767, 135.99066044029354, 136.09739826551032, 136.20413609072716, 136.31087391594394, 136.41761174116078, 136.52434956637757, 136.6310873915944, 136.7378252168112, 136.84456304202803, 136.9513008672448, 137.05803869246165, 137.16477651767843, 137.27151434289527, 137.37825216811206, 137.4849899933289, 137.59172781854568, 137.69846564376252, 137.8052034689793, 137.91194129419614, 138.01867911941292, 138.12541694462976, 138.23215476984655, 138.33889259506338, 138.44563042028017, 138.552368245497, 138.6591060707138, 138.76584389593063, 138.8725817211474, 138.97931954636425, 139.08605737158103, 139.19279519679787, 139.29953302201466, 139.4062708472315, 139.51300867244828, 139.61974649766512, 139.7264843228819, 139.83322214809874, 139.93995997331552, 140.04669779853236, 140.15343562374915, 140.260173448966, 140.36691127418277, 140.4736490993996, 140.5803869246164, 140.68712474983323, 140.79386257505, 140.90060040026685, 141.00733822548364, 141.11407605070048, 141.22081387591726, 141.3275517011341, 141.43428952635088, 141.54102735156772, 141.6477651767845, 141.75450300200134, 141.86124082721813, 141.96797865243497, 142.07471647765175, 142.1814543028686, 142.28819212808537, 142.3949299533022, 142.501667778519, 142.60840560373583, 142.71514342895262, 142.82188125416945, 142.92861907938624, 143.03535690460308, 143.14209472981986, 143.2488325550367, 143.35557038025348, 143.46230820547032, 143.5690460306871, 143.67578385590394, 143.78252168112073, 143.88925950633757, 143.99599733155435, 144.1027351567712, 144.20947298198797, 144.3162108072048, 144.4229486324216, 144.52968645763843, 144.63642428285522, 144.74316210807206, 144.84989993328884, 144.95663775850568, 145.06337558372246, 145.1701134089393, 145.27685123415608, 145.38358905937292, 145.4903268845897, 145.59706470980655, 145.70380253502333, 145.81054036024017, 145.91727818545695, 146.0240160106738, 146.13075383589057, 146.2374916611074, 146.3442294863242, 146.45096731154104, 146.55770513675782, 146.66444296197466, 146.77118078719144, 146.87791861240828, 146.98465643762506, 147.0913942628419, 147.19813208805868, 147.30486991327552, 147.4116077384923, 147.51834556370915, 147.62508338892593, 147.73182121414277, 147.83855903935955, 147.9452968645764, 148.05203468979317, 148.15877251501, 148.2655103402268, 148.37224816544364, 148.47898599066042, 148.58572381587726, 148.69246164109404, 148.79919946631088, 148.90593729152766, 149.0126751167445, 149.1194129419613, 149.22615076717813, 149.3328885923949, 149.43962641761175, 149.54636424282853, 149.65310206804537, 149.75983989326215, 149.866577718479, 149.97331554369578, 150.08005336891262, 150.1867911941294, 150.29352901934624, 150.40026684456302, 150.50700466977986, 150.61374249499664, 150.72048032021348, 150.82721814543027, 150.9339559706471, 151.0406937958639, 151.14743162108073, 151.2541694462975, 151.36090727151435, 151.46764509673113, 151.57438292194797, 151.68112074716475, 151.7878585723816, 151.89459639759838, 152.00133422281522, 152.108072048032, 152.21480987324884, 152.32154769846562, 152.42828552368246, 152.53502334889924, 152.64176117411608, 152.74849899933287, 152.8552368245497, 152.9619746497665, 153.06871247498333, 153.1754503002001, 153.28218812541695, 153.38892595063373, 153.49566377585057, 153.60240160106736, 153.7091394262842, 153.81587725150098, 153.92261507671782, 154.0293529019346, 154.13609072715144, 154.24282855236822, 154.34956637758506, 154.45630420280185, 154.56304202801869, 154.66977985323547, 154.7765176784523, 154.8832555036691, 154.98999332888593, 155.0967311541027, 155.20346897931955, 155.31020680453634, 155.41694462975317, 155.52368245496996, 155.6304202801868, 155.73715810540358, 155.84389593062042, 155.9506337558372, 156.05737158105404, 156.16410940627082, 156.27084723148766, 156.37758505670445, 156.4843228819213, 156.59106070713807, 156.6977985323549, 156.8045363575717, 156.91127418278853, 157.01801200800531, 157.12474983322215, 157.23148765843894, 157.33822548365578, 157.44496330887256, 157.5517011340894, 157.65843895930618, 157.76517678452302, 157.8719146097398, 157.97865243495664, 158.08539026017345, 158.19212808539027, 158.29886591060708, 158.4056037358239, 158.5123415610407, 158.6190793862575, 158.72581721147432, 158.83255503669113, 158.93929286190794, 159.04603068712476, 159.15276851234157, 159.25950633755838, 159.3662441627752, 159.472981987992, 159.5797198132088, 159.68645763842562, 159.79319546364243, 159.89993328885924, 160.00667111407606, 160.11340893929287, 160.22014676450968, 160.3268845897265, 160.4336224149433, 160.5403602401601, 160.64709806537692, 160.75383589059373, 160.86057371581055, 160.96731154102736, 161.07404936624417, 161.18078719146098, 161.2875250166778, 161.3942628418946, 161.5010006671114, 161.60773849232822, 161.71447631754504, 161.82121414276185, 161.92795196797866, 162.03468979319547, 162.14142761841228, 162.2481654436291, 162.3549032688459, 162.4616410940627, 162.56837891927952, 162.67511674449634, 162.78185456971315, 162.88859239492996, 162.99533022014677, 163.10206804536358, 163.2088058705804, 163.3155436957972, 163.422281521014, 163.52901934623083, 163.63575717144764, 163.74249499666445, 163.84923282188126, 163.95597064709807, 164.06270847231488, 164.1694462975317, 164.2761841227485, 164.38292194796531, 164.48965977318213, 164.59639759839894, 164.70313542361575, 164.80987324883256, 164.91661107404937, 165.02334889926618, 165.130086724483, 165.2368245496998, 165.34356237491662, 165.45030020013343, 165.55703802535024, 165.66377585056705, 165.77051367578386, 165.87725150100067, 165.98398932621748, 166.0907271514343, 166.1974649766511, 166.30420280186792, 166.41094062708473, 166.51767845230154, 166.62441627751835, 166.73115410273516, 166.83789192795197, 166.94462975316878, 167.0513675783856, 167.1581054036024, 167.26484322881922, 167.37158105403603, 167.47831887925284, 167.58505670446965, 167.69179452968646, 167.79853235490327, 167.90527018012008, 168.0120080053369, 168.1187458305537, 168.22548365577052, 168.33222148098733, 168.43895930620414, 168.54569713142095, 168.65243495663776, 168.75917278185457, 168.86591060707138, 168.9726484322882, 169.079386257505, 169.18612408272182, 169.29286190793863, 169.39959973315544, 169.50633755837225, 169.61307538358906, 169.71981320880587, 169.82655103402269, 169.9332888592395, 170.0400266844563, 170.14676450967312, 170.25350233488993, 170.36024016010674, 170.46697798532355, 170.57371581054036, 170.68045363575717, 170.787191460974, 170.8939292861908, 171.0006671114076, 171.10740493662442, 171.21414276184123, 171.32088058705804, 171.42761841227485, 171.53435623749166, 171.64109406270848, 171.7478318879253, 171.8545697131421, 171.9613075383589, 172.06804536357572, 172.17478318879253, 172.28152101400934, 172.38825883922615, 172.49499666444297, 172.60173448965978, 172.7084723148766, 172.8152101400934, 172.9219479653102, 173.02868579052702, 173.13542361574383, 173.24216144096064, 173.34889926617745, 173.45563709139427, 173.56237491661108, 173.6691127418279, 173.7758505670447, 173.8825883922615, 173.98932621747832, 174.09606404269513, 174.20280186791194, 174.30953969312876, 174.41627751834557, 174.52301534356238, 174.6297531687792, 174.736490993996, 174.8432288192128, 174.94996664442962, 175.05670446964643, 175.16344229486324, 175.27018012008006, 175.37691794529687, 175.48365577051368, 175.5903935957305, 175.6971314209473, 175.8038692461641, 175.91060707138092, 176.01734489659773, 176.12408272181455, 176.23082054703136, 176.33755837224817, 176.44429619746498, 176.5510340226818, 176.6577718478986, 176.7645096731154, 176.87124749833222, 176.97798532354904, 177.08472314876585, 177.19146097398266, 177.29819879919947, 177.40493662441628, 177.5116744496331, 177.6184122748499, 177.7251501000667, 177.83188792528352, 177.93862575050034, 178.04536357571715, 178.15210140093396, 178.25883922615077, 178.36557705136758, 178.4723148765844, 178.5790527018012, 178.685790527018, 178.79252835223483, 178.89926617745164, 179.00600400266845, 179.11274182788526, 179.21947965310207, 179.32621747831888, 179.4329553035357, 179.5396931287525, 179.64643095396931, 179.75316877918613, 179.85990660440294, 179.96664442961975, 180.07338225483656, 180.18012008005337, 180.28685790527018, 180.393595730487, 180.5003335557038, 180.60707138092062, 180.71380920613743, 180.82054703135424, 180.92728485657105, 181.03402268178786, 181.14076050700467, 181.24749833222148, 181.3542361574383, 181.4609739826551, 181.56771180787192, 181.67444963308873, 181.78118745830554, 181.88792528352235, 181.99466310873916, 182.10140093395597, 182.20813875917278, 182.3148765843896, 182.4216144096064, 182.52835223482322, 182.63509006004003, 182.74182788525684, 182.84856571047365, 182.95530353569046, 183.06204136090727, 183.16877918612408, 183.2755170113409, 183.3822548365577, 183.48899266177452, 183.59573048699133, 183.70246831220814, 183.80920613742495, 183.91594396264176, 184.02268178785857, 184.12941961307538, 184.2361574382922, 184.342895263509, 184.44963308872582, 184.55637091394263, 184.66310873915944, 184.76984656437625, 184.87658438959306, 184.98332221480987, 185.09006004002669, 185.1967978652435, 185.3035356904603, 185.41027351567712, 185.51701134089393, 185.62374916611074, 185.73048699132755, 185.83722481654436, 185.94396264176117, 186.050700466978, 186.1574382921948, 186.2641761174116, 186.37091394262842, 186.47765176784523, 186.58438959306204, 186.69112741827885, 186.79786524349566, 186.90460306871248, 187.0113408939293, 187.1180787191461, 187.2248165443629, 187.33155436957972, 187.43829219479653, 187.54503002001334, 187.65176784523015, 187.75850567044697, 187.86524349566378, 187.9719813208806, 188.0787191460974, 188.1854569713142, 188.29219479653102, 188.39893262174783, 188.50567044696464, 188.61240827218145, 188.71914609739827, 188.82588392261508, 188.9326217478319, 189.0393595730487, 189.1460973982655, 189.25283522348232, 189.35957304869913, 189.46631087391594, 189.57304869913276, 189.67978652434957, 189.78652434956638, 189.8932621747832, 190.0]"]
#    theyears = ["2016", "2017", "2018", "run2"]
#    tasks    = []
    ########----Binning test-----#######
#    theregs  = ["1j1t", "2j1t", "2j2t"]
#    thevars  = ["theBDTJetsFwd1j1t{year}(tmvaBDT_1j1b)", "theBDTJetsFwd2j1t{year}(tmvaBDT_2j1b)", "min(max(Jet2_Pt, 30.), 189.)"]
#    #thevars  = ["getBDtW20binsDYtrain{year}(tmvaBDT_1j1b)", "getBDtWOther12binsDYtrain{year}(tmvaBDT_2j1b)", "min(max(Jet2_Pt, 30.), 189.)"]
#    thebins  = ["[0.5,1.5,2.5,3.5,4.5,5.5,6.5,7.5,8.5,9.5,10.5,11.5,12.5,13.5,14.5,15.5,16.5,17.5,18.5,19.5,20.5]",
#                "[0.5,1.5,2.5,3.5,4.5,5.5,6.5,7.5,8.5,9.5,10.5,11.5,12.5]",
#                "[30.,40.,50.,60.,70.,80.,90.,100.,110.,120.,130.,140.,150.,160.,170.,180.,190.]"]
#    theyears = ["2016", "2017", "2018", "run2"]
#    tasks    = []
    ########----Binning test-----#######
    if variable.lower() != "all":
        if "," in variable:
            thevars = variable.split(",")
        else:
            thevars = [ variable ]

    if region.lower() != "all":
        if "," in region:
            theregs = region.split(",")
        else:
            theregs = [ region ]

    if year.lower() != "all":
        if "," in year:
            theyears = year.split(",")
        else:
            theyears = [ year ]

    for yr in theyears:
        for i in range(len(theregs)):
            if "{year}" in thevars[i] and yr != "run2":
                tasks.append( (prod, yr, thevars[i].format(year = yr), thebins[i], asimov, nthreads, outpath, theregs[i], noUnc, useFibre, extra, pretend, queue) )
            elif "{year}" in thevars[i] and yr == "run2":
                tasks.append( (prod, yr, thevars[i].format(year = ""), thebins[i], asimov, nthreads, outpath, theregs[i], noUnc, useFibre, extra, pretend, queue) )
            else:
                tasks.append( (prod, yr, thevars[i], thebins[i], asimov, nthreads, outpath, theregs[i], noUnc, useFibre, extra, pretend, queue) )

    #print tasks
    calculate = True
    for task in tasks:
        print "\nProcessing " + str(task) + "\n"

        if calculate:
            ExecuteOrSubmitTask(task)
